<?php

# ######## Configuration variables ########
# IMPORTANT: DO NOT EDIT THIS FILE
# When configuring globals, set them at LocalSettings.php instead

/**
 * @var string Wiki ID of OAuth management wiki
 * On wiki farms, it makes sense to set this to a wiki that acts as a portal
 * site, is decidated to management, or just handles login/authentication. It
 * can, however, be set to any wiki if the farm. For single-wiki sites or farms
 * where each wiki manages consumers separately, it should be left as false.
 */
$wgMWOAuthCentralWiki = false;

/**
 * @var bool Whether shared global user IDs are stored in the oauth tables
 * On wiki farms with a central authentication system (with integer user IDs)
 * that share a single OAuth management wiki, this must be set to true. If wikis
 * have a central authentication system but have their own OAuth management, then
 * this can be either true or false. Otherwise it should always be set to false.
 *
 * Setting this to true requires CentralIdLookup or an MWOAuth aware
 * authentication extension.
 *
 * This value should not be changed after the fact to avoid ambigious IDs.
 * Proper user ID migration should be done before any such changes.
 */
$wgMWOAuthSharedUserIDs = false;

/**
 * @var string Source of shared user IDs, if enabled
 *
 * If CentralIdLookup is available, this is the $providerId for
 * CentralIdLookup::factory(). Generally null would be what you want, to use
 * the default provider.
 *
 * If that class is not available or the named provider is not found, this is
 * passed to the 'OAuthGetUserNamesFromCentralIds', 'OAuthGetLocalUserFromCentralId',
 * 'OAuthGetCentralIdFromLocalUser', and 'OAuthGetCentralIdFromUserName' hooks.
 *
 * This has no effect if $wgMWOAuthSharedUserIDs is set to false.
 */
$wgMWOAuthSharedUserSource = null;

/** @var integer Seconds after which an idle consumer request is marked as "expired" */
$wgMWOAuthRequestExpirationAge = 30 * 86400;

$wgAvailableRights[] = 'mwoauthproposeconsumer';
$wgAvailableRights[] = 'mwoauthupdateownconsumer';
$wgAvailableRights[] = 'mwoauthmanageconsumer';
$wgAvailableRights[] = 'mwoauthsuppress';
$wgAvailableRights[] = 'mwoauthviewsuppressed';
$wgAvailableRights[] = 'mwoauthviewprivate';
$wgAvailableRights[] = 'mwoauthmanagemygrants';

$wgGroupPermissions['user']['mwoauthmanagemygrants'] = true;

$wgDefaultUserOptions['echo-subscriptions-web-oauth-owner'] = true;
$wgDefaultUserOptions['echo-subscriptions-email-oauth-owner'] = true;
$wgDefaultUserOptions['echo-subscriptions-web-oauth-admin'] = true;
$wgDefaultUserOptions['echo-subscriptions-email-oauth-admin'] = true;

/** @var bool Require HTTPs for user transactions that might send out secret tokens */
$wgMWOAuthSecureTokenTransfer = true; // RfC compliance

/** @var array List of API module classes to disable when OAuth is used for the request. */
$wgMWOauthDisabledApiModules = array(
	'ApiLogin',
	'ApiLogout',
);

/**
 * @var bool prevent write activity to the database. When this is set, consumers cannot
 * be added or updated, and new authorizations are prohibited. Authorization headers for
 * existing authorizations will continue to work. Useful for migrating database tables.
 */
$wgMWOAuthReadOnly = false;

/**
 * @var string Secret to add to HMAC of token secrets
 * A cryptographically random string, used as an extra protection for secrets stored in the
 * database. This can use the wiki's $wgSecretKey, but in multi-wiki configurations, this needs
 * to be the same for all wikis.
 */
$wgOAuthSecretKey = $wgSecretKey;

/**
 * @var string[] User groups to notify about new consumers that need to be reviewed.
 */
$wgOAuthGroupsToNotify = [];

# End of configuration variables.
# ########
